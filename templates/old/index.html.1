<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>Receipt Manager</title>
  <link rel="manifest" href="/static/manifest.json">
  <link rel="stylesheet" href="/static/bootstrap/bootstrap.min.css">
  <link rel="stylesheet" href="/static/bootstrap-icons/bootstrap-icons.css">
  <link rel="apple-touch-icon" sizes="180x180" href="/static/icon.png">
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
  <link rel="icon" type="image/png" sizes="512x512" href="/static/icon.png">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="default">
  <meta name="apple-mobile-web-app-title" content="Receipt Manager">
  <meta name="theme-color" content="#ffffff">


  <style>
    body {
      background-color: #f8f9fa;
    }
    .navbar-brand {
      font-weight: 600;
      font-size: 1.25rem;
    }
    .tab-content {
      margin-top: 2rem;
      background: #fff;
      padding: 1.5rem;
      border: 1px solid #ddd;
      border-radius: .25rem;
    }
    pre {
      background: #f1f1f1;
      padding: 1rem;
      border-radius: 4px;
    }
    .upload-btn {
      width: 100%;
    }
    .btn-delete {
      width: 30px;
      height: 30px;
      padding: 0;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      font-size: 1.2em;
    }

    #jsonEditor {
      white-space: pre-wrap;  /* Preserve formatting and allow wrapping */
      background: #f8f9fa;    /* Light background for JSON editor */
      padding: 10px;
      border: 1px solid #ddd; /* Subtle border for clarity */
      border-radius: 4px;
      font-family: 'Courier New', Courier, monospace; /* Monospaced font for clarity */
      font-size: 14px;        /* Readable font size */
      overflow-y: auto;       /* Allow scrolling if content overflows */
      max-height: 400px;      /* Prevent excessive height */
    }

    .modal-body pre {
      margin: 0;              /* Remove default margins */
      overflow: auto;         /* Add scroll if content overflows */
      background: transparent; /* Remove white background */
      border: none;           /* Remove border from <pre> */
    }





/* Container to hold buttons in 2x2 grid */
.button-container {
  display: grid;
  grid-template-columns: repeat(2, 1fr); /* 2 columns */
  gap: 10px; /* Space between buttons */
  max-width: 200px; /* Optional: set a max width for the grid */
  margin: 0 auto; /* Center the grid horizontally */
}

/* Material Design Round Buttons with Font Awesome Icons */
.material-btn-round {
  background-color: #2196F3;  /* Button background color */
  border: none;
  border-radius: 50%; /* Ensures the button is round */
  width: 36px; /* Adjust button width */
  height: 36px; /* Adjust button height */
  display: flex;
  justify-content: center; /* Horizontally center the icon */
  align-items: center; /* Vertically center the icon */
  cursor: pointer;
  transition: background-color 0.3s; /* Smooth transition on hover */
  padding: 0; /* Remove any padding */
  box-sizing: border-box; /* Prevents any padding or border from expanding the size */
}

.material-btn-round:hover {
  background-color: #1976D2; /* Darker blue on hover */
}

/* Icon size */
.material-btn-round i {
  font-size: 14px;  /* Set icon size to 14px */
  color: white;  /* Icon color */
}

.action-button {
  display: inline-flex;
  justify-content: center;
  align-items: center;
}

/* Optional: style for the "No Image" text */
.action-link {
  text-decoration: none;
  color: inherit;
}



/* Align Photo Button and Preview Side by Side */
.d-flex {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 1rem;
}

#imagePreviewContainer {
  width: 100px;
  height: 100px;
  border: 1px solid #ccc;
  border-radius: 8px;
  background-color: #f9f9f9;
  overflow: hidden;
  display: flex;
  align-items: center;
  justify-content: center;
}

#previewImage {
  max-width: 100%;
  max-height: 100%;
  object-fit: cover;
}

/* Ensure responsive design */
@media (max-width: 576px) {
  .d-flex {
    flex-direction: column;
    gap: 0.5rem;
  }
}






    .modal-body {
      padding: 0; /* Remove extra padding for cleaner appearance */
    }
  </style>

</head>


<body>

  <!-- Navbar -->
  <nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container">
      <a class="navbar-brand" href="#">
        <img src="/static/icon.png" alt="App Icon" width="30" height="30" class="d-inline-block align-text-top me-2">
        Receipt Manager
      </a>
    </div>
  </nav>

  <div class="container my-4">
    <!-- Nav Tabs -->
    <ul class="nav nav-tabs" id="receiptManagerTabs" role="tablist">
      <li class="nav-item" role="presentation">
        <button 
          class="nav-link active" 
          id="upload-tab" 
          data-bs-toggle="tab" 
          data-bs-target="#upload" 
          type="button" 
          role="tab" 
          aria-controls="upload" 
          aria-selected="true">
          Upload Receipt
        </button>
      </li>
      <li class="nav-item" role="presentation">
        <button 
          class="nav-link" 
          id="search-tab" 
          data-bs-toggle="tab" 
          data-bs-target="#search" 
          type="button" 
          role="tab" 
          aria-controls="search" 
          aria-selected="false">
          Search
        </button>
      </li>
      <li class="nav-item" role="presentation">
        <button 
          class="nav-link" 
          id="dashboard-tab" 
          data-bs-toggle="tab" 
          data-bs-target="#dashboard" 
          type="button" 
          role="tab" 
          aria-controls="dashboard" 
          aria-selected="false">
          Dashboard
        </button>
      </li>
    </ul>

    <!-- Tab Panes -->
    <div class="tab-content" id="myTabContent">



      <!-- Upload Tab -->
      <!-- Upload Section -->
<div class="mb-3 text-center">
  <label for="fileInput" class="form-label fw-bold"></label>
  <div class="d-flex align-items-center justify-content-center gap-3 flex-wrap">
    <!-- Photo Upload Button -->
    <div>
      <input class="form-control visually-hidden" type="file" name="file" accept="image/*" id="fileInput">
      <button type="button" class="btn btn-secondary" onclick="document.getElementById('fileInput').click();">
        ðŸ“¸ Choose or Take a Photo
      </button>
    </div>
    <!-- Receipt Preview -->
    <div id="imagePreviewContainer">
      <img id="previewImage" src="#" alt="Preview" class="img-thumbnail" style="display: none;">
    </div>
  </div>
</div>

<!-- Categories Section -->
<div class="mb-3 text-center">
  <label class="form-label fw-bold">Select Categories:</label>
  <div class="form-check form-check-inline">
    <input class="form-check-input" type="checkbox" value="tax" id="categoryTax">
    <label class="form-check-label" for="categoryTax">Tax</label>
  </div>
  <div class="form-check form-check-inline">
    <input class="form-check-input" type="checkbox" value="read_for_life" id="categoryReadForLife">
    <label class="form-check-label" for="categoryReadForLife">Read for Life</label>
  </div>
  <div class="form-check form-check-inline">
    <input class="form-check-input" type="checkbox" value="warranty" id="categoryWarranty">
    <label class="form-check-label" for="categoryWarranty">Warranty</label>
  </div>
</div>

<!-- Upload Button -->
<div class="text-center mt-3">
  <button type="submit" class="btn btn-primary w-100" id="uploadButton">Upload Receipt</button>
</div>




  <!-- Processing Status Table -->
  <h4 class="mt-4">Processing Status</h4>
  <table class="table table-bordered mt-2" id="uploadStatusTable">
    <thead>
      <tr>
        <th>#</th>
        <th>File Name</th>
        <th>Status</th>
        <th>Time Elapsed</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody id="uploadStatusBody"></tbody>
  </table>
  <div id="taskProgress" class="mt-4 text-center" style="display: none;"></div>
</div>




      <!-- Search Tab -->
      <div class="tab-pane fade" id="search" role="tabpanel" aria-labelledby="search-tab" >
        <h4>Search Receipts</h4>
          <form action="/search" method="GET" class="mt-3">
            <div class="input-group mb-3">
              <input type="text" name="q" class="form-control" placeholder="Enter search term" aria-label="Search term" >
              <button class="btn btn-secondary" type="submit"> Search </button>
            </div>
      	<h5>Filter by Category</h5>
          <div class="form-check">
            <input class="form-check-input" type="checkbox" name="category" value="tax" id="searchTax">
            <label class="form-check-label" for="searchTax">Tax</label>
          </div>
          <div class="form-check">
            <input class="form-check-input" type="checkbox" name="category" value="read_for_life" id="searchReadForLife">
            <label class="form-check-label" for="searchReadForLife">Read for Life</label>
          </div>
          <div class="form-check">
            <input class="form-check-input" type="checkbox" name="category" value="warranty" id="searchWarranty">
            <label class="form-check-label" for="searchWarranty">Warranty</label>
          </div>
        </form>
      </div>



      <!-- Dashboard Tab -->
      <div class="tab-pane fade" id="dashboard" role="tabpanel" aria-labelledby="dashboard-tab" >
        <h4>Receipt Dashboard</h4>
        <a href="/export/csv" class="btn btn-success export-btn">Export All Receipts (CSV)</a>
        <a href="/export/zip" class="btn btn-info export-btn mt-2">Download Full Dataset (ZIP)</a>
        <table class="table table-striped mt-3">
          <thead>
            <tr>
              <th>Date</th>
              <th>Store</th>
              <th>Total</th>
      	      <th>Items</th>
              <th>Categories</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody id="dashboard_body">
        </table>
      </div>



      <!-- JSON Edit Modal -->
      <div class="modal fade" id="editJsonModal" tabindex="-1" aria-labelledby="editJsonModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="editJsonModalLabel">Edit Receipt JSON</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <div
                id="jsonEditor"
                contenteditable="true"
                spellcheck="false"
                style="
                  white-space: pre-wrap;
                  background: #f8f9fa;
                  border: 1px solid #ddd;
                  border-radius: 4px;
                  font-family: 'Courier New', Courier, monospace;
                  font-size: 14px;
                  overflow-y: auto;
                  height: 400px;
                  padding: 10px;
                "
              ></div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
              <button type="button" class="btn btn-primary" onclick="saveReceipt()">Save Changes</button>
            </div>
          </div>
        </div>
      </div>


      <!-- Modal for View Image -->
<div class="modal fade" id="viewImageModal" tabindex="-1" aria-labelledby="viewImageModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="viewImageModalLabel">View Receipt Image</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <img id="viewImage" src="#" alt="Image" class="img-fluid">
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<!-- Modal for View JSON -->
<div class="modal fade" id="viewJsonModal" tabindex="-1" aria-labelledby="viewJsonModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="viewJsonModalLabel">View Receipt JSON</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <pre id="viewJson"></pre> <!-- JSON content will be displayed here -->
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>






    </div>
  </div>



  <script src="/static/bootstrap/bootstrap.bundle.min.js"></script>
  <script>
    let currentJsonFile = '';
    let currentRow = null; // Store the row being edited
    let dashboardScrollPos = 0; // Store scroll position


    //*** editReceipt 
    async function editReceipt(jsonUrl, jsonFileName, rowId) {
      currentJsonFile = jsonFileName;
      currentRow = document.getElementById(rowId); // Store reference to the row

      // Save scroll position
      dashboardScrollPos = document.getElementById('dashboard').scrollTop;

      try {
        const response = await fetch(jsonUrl);
        if (!response.ok) {
          throw new Error('Failed to load JSON data');
        }
        const jsonData = await response.json();
        document.getElementById('jsonEditor').innerText = JSON.stringify(jsonData, null, 2);
        new bootstrap.Modal(document.getElementById('editJsonModal')).show();
      } catch (error) {
        console.error('Error loading JSON:', error);
        alert('Failed to load JSON for editing.');
      }
    }




    //*** saveReceipt 
    async function saveReceipt() {
      const updatedContent = document.getElementById('jsonEditor').innerText;

      try {
        // Validate JSON
        const parsedContent = JSON.parse(updatedContent);

        const response = await fetch('/update_receipt', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            json_file: currentJsonFile,
            content: parsedContent
          })
        });

        const result = await response.json();
        if (response.ok && result.success) {
          alert('Receipt updated successfully!');

          // Update the table row with fresh data
          if (currentRow) {
            currentRow.querySelector('.receipt-date').innerText = parsedContent.tax_invoice?.date || 'N/A';
            currentRow.querySelector('.receipt-store').innerText = parsedContent.store?.name || 'N/A';
            currentRow.querySelector('.receipt-total').innerText = parsedContent.totals?.grand_total || '0.0';
          }

          // Close modal and restore scroll position
          bootstrap.Modal.getInstance(document.getElementById('editJsonModal')).hide();
          document.getElementById('dashboard').scrollTop = dashboardScrollPos;

        } else {
          throw new Error(result.error || 'Failed to update JSON');
        }
      } catch (error) {
        console.error('Error saving JSON:', error);
        alert('Invalid JSON format. Please fix syntax errors before saving.');
      }
    }

    // Restore Scroll Position on Modal Close
    document.getElementById('editJsonModal').addEventListener('hidden.bs.modal', () => {
      document.getElementById('dashboard').scrollTop = dashboardScrollPos;
    });
  




    //*** deleteReceipt
  	async function deleteReceipt(jsonFile, imageFile, rowId) {
      if (!confirm('Are you sure you want to delete this receipt?')) return;

      try {
          const response = await fetch('/delete_receipt', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                  json_file: jsonFile,
                  image_file: imageFile
              })
          });

          const result = await response.json();

          if (response.ok && result.success) {
              alert('Receipt deleted successfully!');
              document.getElementById(rowId).remove(); // Remove the row from the table
          } else {
              throw new Error(result.error || 'Failed to delete receipt');
          }
      } catch (error) {
          console.error('Error deleting receipt:', error);
          alert('Failed to delete receipt. Please try again.');
      }
    }






    //*** uploadForm Submit 

    // Upload Form Logic
const uploadForm = document.getElementById('uploadForm');
const uploadStatusBody = document.getElementById('uploadStatusBody');
let receiptCount = 0;
let taskIntervals = {};


document.getElementById('fileInput').addEventListener('change', function (e) {
  const file = e.target.files[0];
  if (file) {
    const reader = new FileReader();
    reader.onload = function (event) {
      const img = document.getElementById('previewImage');
      img.src = event.target.result;
      img.style.display = 'block';
    };
    reader.readAsDataURL(file);
  }
});



// ðŸŸ¢ Handle Multiple File Uploads
uploadForm.addEventListener('submit', async (e) => {
  e.preventDefault();

  const uploadButton = document.getElementById('uploadButton');
  uploadButton.disabled = true; // Prevent multiple submissions

  const fileInput = document.getElementById('fileInput');
  const files = fileInput.files;

  if (!files.length) {
    alert('Please select a receipt image!');
    uploadButton.disabled = false;
    return;
  }

  Array.from(files).forEach(async (file) => {
    const receiptId = `receipt-${receiptCount++}`;
    const row = createStatusRow(receiptId, file.name);
    uploadStatusBody.appendChild(row);

    const formData = new FormData();
    formData.append('file', file);

    // Get selected categories
    const categories = [];
    if (document.getElementById('categoryTax').checked) categories.push('tax');
    if (document.getElementById('categoryReadForLife').checked) categories.push('read_for_life');
    if (document.getElementById('categoryWarranty').checked) categories.push('warranty');
    formData.append('categories', JSON.stringify(categories));

    try {
      const response = await fetch('/upload', {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        throw new Error('Failed to upload file');
      }

      const result = await response.json();
      if (result.task_id) {
        updateStatus(receiptId, 'Queued');
        startPolling(receiptId, result.task_id);
      }

      // Update Button Text Temporarily
      uploadButton.innerText = 'Receipt Sent for Processing';
      setTimeout(() => {
        resetUploadForm();
        uploadButton.innerText = 'Upload Receipt';
        uploadButton.disabled = false;
      }, 1000);
    } catch (error) {
      console.error('Error during upload:', error);
      updateStatus(receiptId, 'Failed');
      uploadButton.disabled = false;
    }
  });
});

// ðŸŸ¡ Reset the Upload Form
function resetUploadForm() {
  uploadForm.reset(); // Reset the form fields
  document.getElementById('previewImage').style.display = 'none';
  document.getElementById('previewImage').src = '#';
}




// ðŸŸ¡ Create Table Row for Each Receipt
function createStatusRow(id, fileName) {
  const row = document.createElement('tr');
  row.id = id;
  row.innerHTML = `
    <td>${receiptCount}</td>
    <td>${fileName}</td>
    <td class="status">Uploading...</td>
    <td class="timer">0s</td>
    <td>
      <button class="btn btn-sm btn-danger" onclick="cancelTask('${id}')">Cancel</button>
    </td>
  `;
  return row;
}

// ðŸŸ£ Update Status of a Receipt
function updateStatus(id, status) {
  document.querySelector(`#${id} .status`).innerText = status;
}

// ðŸ”„ Poll Task Status
function startPolling(receiptId, taskId) {
  let seconds = 0;

  taskIntervals[receiptId] = setInterval(async () => {
    updateTimer(receiptId, seconds++);
    try {
      const response = await fetch(`/task_status/${taskId}`);
      if (!response.ok) {
        throw new Error('Failed to fetch task status');
      }
      const data = await response.json();

      switch (data.status) {
        case 'SUCCESS':
          updateStatus(receiptId, 'Completed');
          clearInterval(taskIntervals[receiptId]);
          break;
        case 'FAILURE':
          updateStatus(receiptId, 'Failed');
          clearInterval(taskIntervals[receiptId]);
          break;
        default:
          updateStatus(receiptId, data.status || 'Processing');
          break;
      }
    } catch (error) {
      console.error('Error polling status:', error);
      updateStatus(receiptId, 'Error');
      clearInterval(taskIntervals[receiptId]);
    }
  }, 1000); // Poll every second
}

// ðŸ›‘ Cancel Receipt Task
function cancelTask(receiptId) {
  clearInterval(taskIntervals[receiptId]);
  updateStatus(receiptId, 'Cancelled');
}

// ðŸŸ¢ Image Preview on File Select
document.getElementById('fileInput').addEventListener('change', function (e) {
  const file = e.target.files[0];
  if (file) {
    const reader = new FileReader();
    reader.onload = function (event) {
      const img = document.getElementById('previewImage');
      img.src = event.target.result;
      img.style.display = 'block';
    };
    reader.readAsDataURL(file);
  }
});





    // ðŸŸ£ Update Timer for Each Task
    function updateTimer(id, seconds) {
      document.querySelector(`#${id} .timer`).innerText = `${seconds}s`;
    }


    document.getElementById('fileInput').addEventListener('change', function(e) {
      const file = e.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = function(event) {
          const img = document.getElementById('previewImage');
          img.src = event.target.result;
          img.style.display = 'block';  // Show the image preview
        };
        reader.readAsDataURL(file);
      }
    });


    function updateDashboard() {
      fetch('/api/dashboard_data')
          .then(response => response.json())
          .then(data => {
              const tableBody = document.getElementById('dashboard_body');
              let newHtml = '';
              data.forEach((receipt, index) => {
                  newHtml += `
                      <tr id="receipt-${receipt.json_path.split('/').pop().split('.')[0]}" data-scanned-on="${receipt.scanned_on || ''}">
                          <td>${receipt.date || 'N/A'}</td>
                          <td>${receipt.store || 'N/A'}</td>
                          <td>${receipt.total || '0.0'}</td>
                          <td>${receipt.items || 'No Items Listed'}</td>
                          <td>${receipt.categories || 'None'}</td>
                          <td>

<div class="button-container">
                            <!-- View Picture Button -->
${receipt.image_path ? `
  <a href="#" class="action-link" onclick="viewImage('${receipt.image_path}')">
    <button class="material-btn-round">
      <i class="fas fa-eye"></i> <!-- View Picture Icon -->
    </button>
  </a>` 
: 'No Image'}

<!-- View JSON Button -->
${receipt.json_path ? `
  <a href="#" class="action-link" onclick="viewJson('${receipt.json_path}')">
    <button class="material-btn-round">
      <i class="fas fa-code"></i> <!-- View JSON Icon -->
    </button>
  </a>`
: ''}

                            <!-- Edit JSON -->
                            <button class="action-button material-btn-round" onclick="editReceipt('${receipt.json_path}', '${receipt.json_path.split('/').pop()}')">
                              <i class="fas fa-edit"></i> <!-- Edit JSON Icon -->
                            </button>

                            <!-- Delete Receipt -->
                            <button class="action-button material-btn-round" onclick="deleteReceipt('${receipt.json_path.split('/').pop()}', '${receipt.image_path ? receipt.image_path.split('/').pop() : ''}', 'receipt-${receipt.json_path.split('/').pop().split('.')[0]}')" style="width: 36px; height: 36px; padding: 0;">
                              <i class="fas fa-trash"></i> <!-- Delete Receipt Icon -->
                            </div>
                          </td>
                      </tr>
                  `;
              });
              tableBody.innerHTML = newHtml;
          })
          .catch(error => console.error('Error fetching dashboard data:', error));
    }
    

    // Function to open the Image Modal
function viewImage(imageUrl) {
  const modalImage = document.getElementById('viewImage');
  modalImage.src = imageUrl; // Set the source of the image in the modal
  new bootstrap.Modal(document.getElementById('viewImageModal')).show(); // Show the modal
}

// Function to open the JSON Modal
function viewJson(jsonUrl) {
  fetch(jsonUrl)
    .then(response => response.json())
    .then(data => {
      const modalJson = document.getElementById('viewJson');
      modalJson.textContent = JSON.stringify(data, null, 2); // Format JSON with indentation
      new bootstrap.Modal(document.getElementById('viewJsonModal')).show(); // Show the modal
    })
    .catch(error => {
      console.error('Error loading JSON:', error);
      alert('Failed to load JSON.');
    });
}



    document.addEventListener('DOMContentLoaded', function() {
      updateDashboard();
    });

  </script>
  </body>
</html>