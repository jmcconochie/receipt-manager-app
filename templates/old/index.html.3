
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, shrink-to-fit=no"
    />
    <title>Receipt Manager</title>
    <link rel="manifest" href="/static/manifest.json" />
    <link rel="stylesheet" href="/static/bootstrap/bootstrap.min.css" />
    <link rel="stylesheet" href="/static/bootstrap-icons/bootstrap-icons.css" />
    <link rel="apple-touch-icon" sizes="180x180" href="/static/icon.png" />
    <link
      href="https://fonts.googleapis.com/icon?family=Material+Icons"
      rel="stylesheet"
    />
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"
      rel="stylesheet"
    />
    <link rel="icon" type="image/png" sizes="512x512" href="/static/icon.png" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default" />
    <meta name="apple-mobile-web-app-title" content="Receipt Manager" />
    <meta name="theme-color" content="#ffffff" />

    <style>
      /* General Styles */
      body {
        background-color: #f8f9fa;
        font-family: Arial, sans-serif;
      }

      .container {
        margin-top: 0.5rem;
        /* Reduce the top margin */
      }

      /* Navbar Styling */
      .navbar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.2rem 1rem;
        height: 50px;
        margin-bottom: 0.5rem;
      }

      .navbar-brand {
        font-weight: 600;
        font-size: 1.25rem;
        display: flex;
        align-items: center;
      }

      .navbar-brand img {
        width: 24px;
        height: 24px;
        margin-right: 0.5rem;
      }

      /* Refresh Button Styling */
      #refreshDashboard {
        display: inline-flex;
        align-items: center;
        justify-content: center;
      }

      #refreshDashboard i {
        font-size: 1.25rem;
      }

      /* Tab Navigation */
      .nav-tabs {
        margin-bottom: 0.5rem;
        border-bottom: 1px solid #ddd;
        display: flex;
        justify-content: center;
        width: 100%;
      }

      .nav-tabs .nav-link {
        padding: 0.3rem 1rem;
        font-size: 0.9rem;
        text-align: center;
      }

      /* Tab Content */
      .tab-content {
        padding: 1rem;
        width: 100%;
        margin-top: 1rem;
        background: #fff;
        border: 1px solid #ddd;
        border-radius: .25rem;
      }

      /* Button Styles */
      .upload-btn,
      .btn-delete,
      .material-btn-round {
        width: 100%;
      }

      .material-btn-round {
        background-color: #2196F3;
        border: none;
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
        cursor: pointer;
        transition: background-color 0.3s;
        width: 36px;
        height: 36px;
      }

      .material-btn-round i {
        font-size: 18px;
        color: white;
      }

      /* Flex Layout for Photo Upload */
      .d-flex {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 1rem;
      }


      #imagePreviewContainer {
        width: 100px;
        height: 100px;
        border: 1px solid #ccc;
        border-radius: 8px;
        background-color: #f9f9f9;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      #previewImage {
        max-width: 100%;
        max-height: 100%;
        object-fit: cover;
      }

      /* Table Styling */
      .table {
        width: 100%;
        table-layout: auto;
        border-collapse: collapse;
      }

      .table th,
      .table td {
        padding: 0.75rem;
        text-align: left;
        word-wrap: break-word;
      }

      .table th {
        font-size: 0.9rem;
        font-weight: 600;
        background-color: #f8f9fa;
        border-bottom: 1px solid #ddd;
      }

      .table td {
        font-size: 0.85rem;
      }

      /* Table Column Styling */
      #dashboard .table td:nth-child(2) {
        text-align: right;
      }

      #dashboard .table td:first-child {
        width: 10%;
      }

      #dashboard .table td:nth-child(2) {
        width: 10%;
      }

      #dashboard .table td:nth-child(3) {
        width: 55%;
      }

      #dashboard .table td:nth-child(4) {
        width: 15%;
      }

      #dashboard .table td:nth-child(5) {
        width: 10%;
      }

      /* Responsive Table Adjustments */
      @media (max-width: 768px) {
        .table {
          font-size: 0.85rem;
        }

        #dashboard .table td:first-child {
          width: 30%;
        }

        #dashboard .table td:nth-child(2),
        #dashboard .table td:nth-child(3),
        #dashboard .table td:nth-child(4),
        #dashboard .table td:nth-child(5) {
          width: 15%;
        }

        .tab-content {
          padding: 0.5rem;
        }
      }

      @media (min-width: 768px) {

        .table th,
        .table td {
          padding: 1rem;
        }

        #dashboard .table td:nth-child(2) {
          text-align: right;
        }
      }

      /* Navbar and Tab Responsiveness */
      @media (max-width: 576px) {
        .navbar {
          height: 45px;
        }

        .navbar-brand img {
          width: 20px;
          height: 20px;
        }

        .nav-tabs .nav-link {
          padding: 0.2rem 0.5rem;
          font-size: 0.8rem;
        }

        .tab-content {
          padding: 0.5rem;
        }

        #uploadButton {
          padding: 0.4rem 0.8rem;
        }

        #imagePreviewContainer {
          width: 80px;
          height: 80px;
        }

        .table th,
        .table td {
          font-size: 0.85rem;
          padding: 0.5rem;
        }

        .table {
          font-size: 0.75rem;
          overflow-x: auto;
        }
      }

      /* Ensure tabs are always horizontal */
      .nav-tabs {
        display: flex;
        flex-direction: row;
        width: 100%;
        padding: 0;
        justify-content: center;
      }

      .nav-tabs .nav-link {
        padding: 0.5rem 1rem;
        font-size: 1rem;
      }

      /* Button Container for 2x2 layout */
      .button-container {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        /* 2 columns */
        justify-content: center;
        /* Center the buttons horizontally */
        align-items: center;
        /* Center the buttons vertically */
        margin: 0 auto;
        /* Center the grid in its container */
      }




      /* Adjust JSON editor and image viewer layout */
#jsonEditor {
  height: 400px; /* Set fixed height for JSON editor */
  font-family: Courier New, monospace;
  font-size: 14px;
  resize: vertical;  /* Allow resizing vertically */
}

#imageViewerContainer {
  width: 100%;
  height: 400px; /* Set fixed height for the image viewer */
  overflow: hidden;
  position: relative;
}

#imageViewer {
  max-width: 100%;
  max-height: 100%;
  object-fit: contain;
}

/* Flex layout for JSON and Image side by side */
#edit .d-flex {
  gap: 20px;
  display: flex;
  flex-wrap: wrap;
}

#edit .d-flex > div {
  flex: 1;
  min-width: 400px; /* Ensures elements are not too narrow */
}

/* Hide Edit tab initially */
#edit-tab {
  display: none;
}

/* Adjust Flex for smaller screens */
@media (max-width: 768px) {
  #edit .d-flex {
    flex-direction: column;  /* Stack JSON editor and image vertically on small screens */
  }
}




/* Active row styling */
.receipt-row.active-row {
  background-color: #e0f7fa; /* Light cyan background for active row */
}





    </style>
  </head>

  <body>
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
      <div class="container d-flex justify-content-between align-items-center">
        <a class="navbar-brand" href="#">
          <img
            src="/static/icon.png"
            alt="App Icon"
            width="30"
            height="30"
            class="d-inline-block align-text-top me-2"
          />
          Receipt Manager
        </a>
        <button
          id="refreshDashboard"
          class="btn btn-outline-secondary btn-sm d-flex align-items-center"
        >
          <i class="fas fa-sync-alt"></i>
        </button>
      </div>
    </nav>

    <div class="container my-4">
      <ul class="nav nav-tabs" id="receiptManagerTabs" role="tablist">
        <li class="nav-item" role="presentation">
          <button
            class="nav-link active"
            id="upload-tab"
            data-bs-toggle="tab"
            data-bs-target="#upload"
            type="button"
            role="tab"
            aria-controls="upload"
            aria-selected="true"
          >
            Upload Receipt
          </button>
        </li>
        <li class="nav-item" role="presentation">
          <button
            class="nav-link"
            id="search-tab"
            data-bs-toggle="tab"
            data-bs-target="#search"
            type="button"
            role="tab"
            aria-controls="search"
            aria-selected="false"
          >
            Search
          </button>
        </li>
        <li class="nav-item" role="presentation">
          <button
            class="nav-link"
            id="dashboard-tab"
            data-bs-toggle="tab"
            data-bs-target="#dashboard"
            type="button"
            role="tab"
            aria-controls="dashboard"
            aria-selected="false"
          >
            Dashboard
          </button>
        </li>
        <li class="nav-item" role="presentation">
          <button class="nav-link" id="edit-tab" data-bs-toggle="tab" data-bs-target="#edit" type="button" role="tab" aria-controls="edit" aria-selected="false">
            Edit Receipt
          </button>
        </li>
      </ul>

      <div class="tab-content" id="myTabContent">
        <!-- Upload Tab -->
        <div
          class="tab-pane fade show active"
          id="upload"
          role="tabpanel"
          aria-labelledby="upload-tab"
        >
          <form id="uploadForm" enctype="multipart/form-data" class="mt-3">
            <!-- Upload Section -->
            <div class="mb-3 text-center">
              <div
                class="d-flex align-items-center justify-content-center gap-3 flex-wrap"
              >
                <!-- Photo Upload Button -->
                <div>
                  <input
                    class="form-control visually-hidden"
                    type="file"
                    name="file"
                    accept="image/*"
                    id="fileInput"
                  />
                  <button
                    type="button"
                    class="btn btn-secondary"
                    onclick="document.getElementById('fileInput').click();"
                  >
                    📸 Choose or Take a Photo
                  </button>
                </div>
                <!-- Receipt Preview -->
                <div id="imagePreviewContainer">
                  <img
                    id="previewImage"
                    src="#"
                    alt="Preview"
                    class="img-thumbnail"
                    style="display: none;"
                  />
                </div>
              </div>
            </div>

            <!-- Categories Section -->
            <div class="mb-3 text-center">
              <label class="form-label fw-bold">Select</label>
              <div class="form-check form-check-inline">
                <input
                  class="form-check-input"
                  type="checkbox"
                  value="tax"
                  id="categoryTax"
                />
                <label class="form-check-label" for="categoryTax">Tax</label>
              </div>
              <div class="form-check form-check-inline">
                <input
                  class="form-check-input"
                  type="checkbox"
                  value="read_for_life"
                  id="categoryReadForLife"
                />
                <label class="form-check-label" for="categoryReadForLife"
                  >Read for Life</label
                >
              </div>
              <div class="form-check form-check-inline">
                <input
                  class="form-check-input"
                  type="checkbox"
                  value="warranty"
                  id="categoryWarranty"
                />
                <label class="form-check-label" for="categoryWarranty"
                  >Warranty</label
                >
              </div>
            </div>

            <!-- Upload Button -->
            <div class="text-center mt-3">
              <button
                type="submit"
                class="btn btn-primary w-100"
                id="uploadButton"
              >
                Upload Receipt
              </button>
            </div>
          </form>

          <!-- Processing Status Section -->
          <table class="table table-bordered mt-2" id="uploadStatusTable">
            <thead>
              <tr>
                <th>#</th>
                <th>File Name</th>
                <th>Status</th>
                <th>Time Elapsed</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody id="uploadStatusBody"></tbody>
          </table>
          <div
            id="taskProgress"
            class="mt-4 text-center"
            style="display: none;"
          ></div>
        </div>

        <!-- Search Tab -->
        <div
          class="tab-pane fade"
          id="search"
          role="tabpanel"
          aria-labelledby="search-tab"
        >
          <form action="/search" method="GET" class="mt-3">
            <div class="input-group mb-3">
              <input
                type="text"
                name="q"
                class="form-control"
                placeholder="Enter search term"
                aria-label="Search term"
              />
              <button class="btn btn-secondary" type="submit">Search</button>
            </div>
            <h6>Filter by Category</h6>
            <div class="form-check">
              <input
                class="form-check-input"
                type="checkbox"
                name="category"
                value="tax"
                id="searchTax"
              />
              <label class="form-check-label" for="searchTax">Tax</label>
            </div>
            <div class="form-check">
              <input
                class="form-check-input"
                type="checkbox"
                name="category"
                value="read_for_life"
                id="searchReadForLife"
              />
              <label class="form-check-label" for="searchReadForLife"
                >Read for Life</label
              >
            </div>
            <div class="form-check">
              <input
                class="form-check-input"
                type="checkbox"
                name="category"
                value="warranty"
                id="searchWarranty"
              />
              <label class="form-check-label" for="searchWarranty"
                >Warranty</label
              >
            </div>
          </form>
        </div>

        <!-- Dashboard Tab -->
        <div
          class="tab-pane fade"
          id="dashboard"
          role="tabpanel"
          aria-labelledby="dashboard-tab"
        >
          <div class="d-flex align-items-center justify-content-between mb-2">
            <div>
              <a
                href="/export/csv"
                class="btn btn-outline-secondary btn-sm me-1"
                >Export All (CSV)</a
              >
              <a href="/export/zip" class="btn btn-outline-secondary btn-sm"
                >Download Dataset (ZIP)</a
              >
            </div>
          </div>
          <table class="table mt-3">
            <thead>
              <tr>
                <th>Date</th>
                <th>Total</th>
                <th>Items</th>
                <th>Categories</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody id="dashboard_body"></tbody>
          </table>
        </div>



         <!-- Edit Tab Content (hidden initially) -->
  <div class="tab-pane fade" id="edit" role="tabpanel" aria-labelledby="edit-tab">
    <form id="editReceiptForm">
      <!-- Side-by-Side Layout (JSON and Image) -->
      <div class="d-flex" style="gap: 20px;">
        <!-- JSON Editor -->
        <div style="flex: 1;">
          <label for="jsonEditor" class="form-label">JSON Editor</label>
          <textarea id="jsonEditor" class="form-control" rows="10" style="font-family: Courier New;"></textarea>
        </div>

        <!-- Image Viewer -->
        <div style="flex: 1; max-width: 400px;">
          <label class="form-label">Receipt Image</label>
          <div id="imageViewerContainer" style="height: 400px; overflow: hidden;">
            <img id="imageViewer" src="#" alt="Receipt Image" style="width: 100%; height: 100%; object-fit: contain;">
          </div>
        </div>
      </div>

      <!-- Save Button -->
      <div class="d-flex justify-content-between mt-3">
        <!-- Save Button -->
        <button type="button" class="btn btn-primary" id="saveChangesButton">Save Changes</button>
        <!-- Close Button -->
        <button type="button" class="btn btn-secondary" id="closeEditTabButton">Close</button>
      </div>

    </form>
  </div>




        

</div>
</div>




    <script src="/static/bootstrap/bootstrap.bundle.min.js"></script>
    <script>

          let currentJsonFile = '';
          let currentRow = null; // Store the row being edited

          // Function to start polling the task status
         function startPolling(taskId, button) {
          let seconds = 0;
          const pollingInterval = setInterval(() => {
            fetch(`/task_status/${taskId}`)
              .then(response => response.json())
              .then(data => {
                if (data.status === 'SUCCESS' || data.status === 'FAILURE') {
                  clearInterval(pollingInterval);  // Stop polling when the task is finished
                  updateDashboard();  // Update the dashboard to reflect the new state
                  if (button) {
                    button.style.backgroundColor = '';  // Revert to the original color when the task is done
                  }
                }
              })
              .catch(error => {
                console.error('Error polling task status:', error);
                clearInterval(pollingInterval);  // Stop polling in case of an error
                if (button) {
                  button.style.backgroundColor = '';  // Revert the button color
                }
              });
            }, 1000);  // Poll every second
          }





          let scale = 1;  // Initial scale
          let isDragging = false;
          let startX, startY;

          const imageViewer = document.getElementById('imageViewer');
          const imageViewerContainer = document.getElementById('imageViewerContainer');

          // Zoom function
          function zoomImage(increment) {
            scale += increment;  // Adjust scale by a given increment
            scale = Math.max(scale, 0.5); // Prevent zooming out too much (50%)
            scale = Math.min(scale, 3); // Prevent zooming in too much (300%)
            imageViewer.style.transform = `scale(${scale})`;  // Apply zoom with transform
          }

          // Handle mouse wheel or trackpad zooming
          imageViewerContainer.addEventListener('wheel', (e) => {
            e.preventDefault();  // Prevent page scrolling

            // Adjust zoom sensitivity by dividing deltaY by a factor (to make zoom less sensitive)
            const zoomIncrement = e.deltaY < 0 ? 0.05 : -0.05; // Zoom in and out by smaller increments
            zoomImage(zoomIncrement);
          });

          // Pan functionality
          imageViewerContainer.addEventListener('mousedown', (e) => {
            e.preventDefault();  // Prevent any default browser behavior
            isDragging = true;
            startX = e.clientX - imageViewer.offsetLeft;
            startY = e.clientY - imageViewer.offsetTop;
            imageViewer.style.cursor = 'move'; // Change cursor to indicate dragging
          });

          imageViewerContainer.addEventListener('mousemove', (e) => {
            if (!isDragging) return;
            let moveX = e.clientX - startX;
            let moveY = e.clientY - startY;
            imageViewer.style.transform = `scale(${scale}) translate(${moveX}px, ${moveY}px)`; // Apply pan along with zoom
          });

          imageViewerContainer.addEventListener('mouseup', () => {
            isDragging = false;
            imageViewer.style.cursor = 'default';
          });

          imageViewerContainer.addEventListener('mouseleave', () => {
            isDragging = false;
            imageViewer.style.cursor = 'default';
          });

          // Disable text selection and dragging the image as a file
          imageViewer.style.userSelect = 'none';  // Prevent text selection inside the image
          imageViewer.style.pointerEvents = 'auto';  // Ensure image events are handled properly










      async function editReceipt(jsonUrl, jsonFileName, imageFileName, rowId) {
        // Fetch JSON data
        const response = await fetch(jsonUrl);
        const jsonData = await response.json();
        currentJsonFile = jsonFileName;
      
        // Populate the JSON editor with the receipt's JSON data
        document.getElementById('jsonEditor').value = JSON.stringify(jsonData, null, 2);
      
        // Set the image source for the image viewer
        const imageViewer = document.getElementById('imageViewer');
        imageViewer.src = imageFileName;  // Set the image URL (replace with actual path)
      
        // Show the "Edit" tab and activate it
        const editTab = new bootstrap.Tab(document.getElementById('edit-tab'));
        editTab.show(); // Show the edit tab
        
        // Optionally, make the Edit tab visible after the edit button is clicked
        document.getElementById('edit-tab').style.display = 'block'; // Ensure it's visible
        currentRow = rowId;
      }














          //*** deleteReceipt
        	async function deleteReceipt(jsonFile, imageFile, rowId) {
            if (!confirm('Are you sure you want to delete this receipt?')) return;

            try {
                const response = await fetch('/delete_receipt', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        json_file: jsonFile,
                        image_file: imageFile
                    })
                });

                const result = await response.json();

                if (response.ok && result.success) {
                    alert('Receipt deleted successfully!');
                    document.getElementById(rowId).remove(); // Remove the row from the table
                    updateDashboard();
                } else {
                    throw new Error(result.error || 'Failed to delete receipt');
                }
            } catch (error) {
                console.error('Error deleting receipt:', error);
                alert('Failed to delete receipt. Please try again.');
            }
          }



          //*** Update Timer for Each Task
          function updateTimer(id, seconds) {
            document.querySelector(`#${id} .timer`).innerText = `${seconds}s`;
          }



         //*** Update Status of a Receipt
         function updateStatus(id, status) {
          const statusElement = document.querySelector(`#${id} .status`);
          if (statusElement) {
            statusElement.innerText = status;
          }
        }



        //*** Reset the Upload Form
        function resetUploadForm() {
          uploadForm.reset(); // Reset the form fields
          previewImage.style.display = 'none';
          previewImage.src = '#';
        }



        function scrollToRow(rowId) {
          const row = document.getElementById(rowId);
          if (row) {
            
        
            // Scroll the row into view
            row.scrollIntoView({
              behavior: 'smooth', // Smooth scrolling
              block: 'center',    // Center the row in the viewport
            });
        
            // Remove the green dot after a short delay (e.g., 2 seconds)
            setTimeout(() => {
              greenDot.remove();
            }, 2000); // Adjust the duration as needed
          }
        }





        //*** Create Table Row for Each Receipt
        function createStatusRow(id, fileName) {
          const row = document.createElement('tr');
          row.id = id;
          row.innerHTML = `
            <td>${receiptCount}</td>
            <td>${fileName}</td>
            <td class="status">Uploading...</td>
            <td class="timer">0s</td>
            <td>
              <button class="btn btn-sm btn-danger" onclick="cancelTask('${id}')">Cancel</button>
            </td>
          `;
          return row;
        }


        //*** updateDashboard
        function updateDashboard() {
          fetch('/api/dashboard_data')
              .then(response => response.json())
              .then(data => {
                  const tableBody = document.getElementById('dashboard_body');
                  let newHtml = '';
                  data.forEach((receipt, index) => {
                      newHtml += `
                          <tr id="receipt-${receipt.json_path.split('/').pop().split('.')[0]}" class="receipt-row" tabindex="0">
                              <td>
                                <span class="receipt-date">${receipt.date || 'N/A'}</span>
                                <br>
                                <span class="receipt-store">${receipt.store || 'N/A'}</span>
                              </td>
                              <td>${receipt.total || '0.0'}</td>
                              <td>${receipt.items || 'No Items Listed'}</td>
                              <td>${receipt.categories || 'None'}</td>
                              <td>

                                <!-- The only action now is the Edit button -->
                                <button class="action-button material-btn-round" 
        onclick="editReceipt('${receipt.json_path}', '${receipt.json_path.split('/').pop()}', '${receipt.image_path}', 'receipt-${receipt.json_path.split('/').pop().split('.')[0]}')">
  <i class="fas fa-edit"></i> <!-- Edit JSON and View Image Icon -->
</button>

                                <!-- Rescan Button -->
                                <button class="action-button material-btn-round" id="rescan-btn-${receipt.image_path.split('/').pop()}" onclick="rescanReceipt('${receipt.image_path.split('/').pop()}')">
                                  <i class="fas fa-sync-alt"></i> <!-- Rescan Icon -->
                                </button>

                                <button class="action-button material-btn-round" onclick="deleteReceipt('${receipt.json_path}', '${receipt.image_path}', 'receipt-${receipt.json_path.split('/').pop().split('.')[0]}')">
                                  <i class="fas fa-trash"></i> <!-- Delete Icon -->
                                </button>

                                </div>


                              </td>
                          </tr>
                      `;
                  });
                  tableBody.innerHTML = newHtml;
                  console.log('setting active row');
                  setActiveRow(currentRow);
              })
              .catch(error => console.error('Error fetching dashboard data:', error));
          }






        // Function to trigger a rescan of a receipt
        function rescanReceipt(jsonFileName) {
          if (!confirm('Are you sure you want to rescan this receipt?')) return;

          const button = document.getElementById(`rescan-btn-${jsonFileName}`);  // Target the button by its ID
          if (button) {
            button.style.backgroundColor = 'red';  // Change the button color to red
          }

          const formData = new FormData();
          formData.append('rescan_filename', jsonFileName);

          // Send the request to start the rescan task
          fetch('/upload', {
            method: 'POST',
            body: formData
          })
          .then(response => response.json())
          .then(result => {
            if (result.task_id) {
              // Start polling the task status using the task ID
              startPolling(result.task_id, button);
            } else {
              alert('Failed to start rescan task.');
              if (button) {
                button.style.backgroundColor = '';  // Revert the button color
              }
            }
          })
          .catch(error => {
            console.error('Error during rescan:', error);
            alert('Failed to initiate rescan. Please try again.');
            if (button) {
              button.style.backgroundColor = '';  // Revert the button color
            }
          });
        }
          



        function closeEditTab() {
          console.log('entered closeEditTab');
          // Hide the Edit tab content
          const editTabContent = document.getElementById('edit');
          editTabContent.classList.remove('show', 'active');
          
          // Hide the "Edit" tab in the navigation
          const editTab = document.getElementById('edit-tab');
          editTab.classList.add('d-none');  // Hide the tab in the navigation
        
          // Show the previous tab (for example, "Dashboard" tab)
          const dashboardTab = new bootstrap.Tab(document.getElementById('dashboard-tab'));
          dashboardTab.show(); // Switch back to the Dashboard tab
          
          // Reset the JSON editor and image viewer
          document.getElementById('jsonEditor').value = '';  // Clear the JSON editor
          document.getElementById('imageViewer').src = '';   // Clear the image viewer

          // Scroll to the row 
          const row = document.getElementById(currentRow);
          if (row) { row.scrollIntoView({ behavior: "smooth", block: "center" }); }
          console.log('closed tab - setting active row');
          setActiveRow(currentRow);
        }


        // Function to add the active row class to a specific row
        function setActiveRow(rowId) {
          // Remove the active class from all rows
          const allRows = document.querySelectorAll('.receipt-row');
          allRows.forEach(row => {
            row.classList.remove('table-active'); // Remove active class from all rows
          });

          // Add the active class to the specific row
          const row = document.getElementById(rowId);
          console.log('found row',row)
          if (row) {
            row.classList.add('table-active'); // Add active class to the row
            row.scrollIntoView({ behavior: "smooth", block: "center" }); 
          }

          currentRow = rowId;
        }

        




      // After DCOM Loaded
          document.addEventListener('DOMContentLoaded', function () {

            const uploadForm = document.getElementById('uploadForm');
            const uploadButton = document.getElementById('uploadButton');
            const uploadStatusBody = document.getElementById('uploadStatusBody');
            const fileInput = document.getElementById('fileInput');
            const previewImage = document.getElementById('previewImage');

            let receiptCount = 0;
            let taskIntervals = {};

            if (!uploadForm || !fileInput || !previewImage || !uploadButton) {
              console.error('One or more required elements are missing!');
              return;
            }

            // 🟢 Handle Multiple File Uploads
            uploadForm.addEventListener('submit', async (e) => {
              e.preventDefault();

              uploadButton.disabled = true; // Prevent multiple submissions

              const files = fileInput.files;

              if (!files.length) {
                alert('Please select a receipt image!');
                uploadButton.disabled = false;
                return;
              }

              Array.from(files).forEach(async (file) => {
                const receiptId = `receipt-${receiptCount++}`;
                const row = createStatusRow(receiptId, file.name);
                uploadStatusBody.appendChild(row);

                const formData = new FormData();
                formData.append('file', file);

                try {
                  const response = await fetch('/upload', {
                    method: 'POST',
                    body: formData,
                  });

                  if (!response.ok) {
                    throw new Error('Failed to upload file');
                  }

                  const result = await response.json();
                  if (result.task_id) {
                    updateStatus(receiptId, 'Queued');
                    startPolling(receiptId, result.task_id);
                  }

                  // Show confirmation on button and reset form
                  uploadButton.innerText = 'Receipt Sent for Processing';
                  setTimeout(() => {
                    resetUploadForm();
                    uploadButton.innerText = 'Upload Receipt';
                    uploadButton.disabled = false;
                  }, 1000);
                } catch (error) {
                  console.error('Error during upload:', error);
                  updateStatus(receiptId, 'Failed');
                  uploadButton.disabled = false;
                }
              });
            });



            // 🖼️ Image Preview on File Select
            fileInput.addEventListener('change', function (e) {
              const file = e.target.files[0];
              if (file) {
                const reader = new FileReader();
                reader.onload = function (event) {
                  previewImage.src = event.target.result;
                  previewImage.style.display = 'block';
                };
                reader.readAsDataURL(file);
              }
            });



          const triggerTabList = document.querySelectorAll('#receiptManagerTabs button');
          triggerTabList.forEach(triggerEl => {
            const tabTrigger = new bootstrap.Tab(triggerEl);
            triggerEl.addEventListener('click', event => {
              event.preventDefault();
              tabTrigger.show();
            });
          });




          // 🟢 Manual Dashboard Refresh
          document.getElementById('refreshDashboard').addEventListener('click', () => {
            updateDashboard();
            console.log('Dashboard refreshed manually.');
          });




          document.getElementById('saveChangesButton').addEventListener('click', async () => {
            const updatedJson = document.getElementById('jsonEditor').value;
          
            try {
              const parsedJson = JSON.parse(updatedJson);  // Validate the JSON
          
              // Send the updated JSON to the server
              const response = await fetch('/update_receipt', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  json_file: currentJsonFile,
                  content: parsedJson
                })
              });
          
              const result = await response.json();
              if (response.ok && result.success) {
                //alert('Receipt updated successfully!');
                updateDashboard();  // Update the dashboard if needed
                closeEditTab();
              } else {
                throw new Error(result.error || 'Failed to update JSON');
              }
          
            } catch (error) {
              console.error('Error saving JSON:', error);
              alert('Invalid JSON format. Please fix syntax errors before saving.');
            }
          });



          document.getElementById('closeEditTabButton').addEventListener('click', () => {
            closeEditTab();
          });







          updateDashboard();
        });
    </script>
  </body>
</html>
